
name: SonarCloud analysis

on:
  push:
  workflow_dispatch:

jobs:
  SAST:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
        with:
          args:
            -Dsonar.projectKey="DevSecOps-roth_laboratorio-final"
            -Dsonar.organization="devsecops-roth"
          projectBaseDir: .
          
      - name: Descargar Reporte SonarCloud
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }} "https://sonarcloud.io/api/qualitygates/project_status?projectKey=DevSecOps-roth_laboratorio-final" -o quality-gate.json

      - name: Subir Quality Gate como Artefacto
        uses: actions/upload-artifact@v3
        with:
          name: sast-quality-gate
          path: quality-gate.json
          
      - name: Analizar Quality Gate
        run: |
          if jq -e '.projectStatus.status == "ERROR"' quality-gate.json > /dev/null; then
            echo "El análisis SAST encontró vulnerabilidades medias, altas o críticas."
            exit 1
          else
            echo "El análisis SAST pasó el Quality Gate sin vulnerabilidades bloqueantes."
          fi


  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v2

      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Instalar dependencias
        run: npm install
      
      - name: Instalar Snyk
        run: npm install -g snyk
        
      - name: Análisis con Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
          
      - name: Ejecuta Snyk
        run: |
          snyk test --all-projects --json > snyk-results.json || true
          
      - name: Subir resultados de Snyk
        uses: actions/upload-artifact@v3
        with:
          name: snyk-results
          path: snyk-results.json
          
#      - name: Verificar Vulnerabilidades Críticas
#        run: |
#          if jq '.[] | .vulnerabilities[] | select(.severity == "critical")' snyk-results.json; then
#            echo "Vulnerabilidades críticas detectadas."
#            exit 1
#          else
#            echo "Sin vulnerabilidades críticas detectadas."
#          fi
#      - name: Verificar Vulnerabilidades Críticas o Altas
#        run: |
#          if jq '.[] | .vulnerabilities[] | select(.severity == "critical" or .severity == "high")' snyk-results.json; then
#            echo "Vulnerabilidades críticas o altas detectadas."
#            exit 1
#          else
#            echo "Sin vulnerabilidades críticas o altas detectadas."
#          fi
#      - name: Verificar Vulnerabilidades Críticas, Altas o Medias
#        run: |
#          if jq '.[] | .vulnerabilities[] | select(.severity == "critical" or .severity == "high" or .severity == "medium")' snyk-results.json; then
#            echo "Vulnerabilidades críticas, altas o medias detectadas."
#            exit 1
#          else
#            echo "Sin vulnerabilidades críticas, altas o medias detectadas."
#          fi
  DOCKER_BUILD-TRIVY_ANALISIS:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: inicio de sesion
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t rothaliphusach/laboratorio-final:latest .

      - name: Push Docker Image
        run: |
          docker push rothaliphusach/laboratorio-final:latest
        
      - name: Ejecuta scan de Trivy
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'rothaliphusach/laboratorio-final:latest'
          format: 'sarif'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Subir resultados de TRIVY
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results.sarif

#      - name: Analiza reporte trivy
#        run: |
#          if jq '.runs[].results[] | select(.level == "warning" or .level == "error")' trivy-results.sarif; then
#            echo "Se encontraron vulnerabilidades medias, altas o críticas."
#            exit 1
#          else
#            echo "No se encontraron vulnerabilidades medias, altas o críticas."
#          fi

  DEPLOY_DOCKER_DESKTOP:
    name: Despliegue a Docker
    needs: DOCKER_BUILD-TRIVY_ANALISIS
    runs-on: self-hosted
    steps:
      - name: Login Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Envío de imagen a docker desktop
        run: |
          docker pull rothaliphusach/laboratorio-final:latest

      - name: Obtener ID de la Imagen Docker
        run: |
          FOR /F "delims=" %%i IN ('docker images -q rothaliphusach/laboratorio-final:latest') DO @set IMAGE_ID=%%i
          echo "IMAGE_ID=%IMAGE_ID%" >> $GITHUB_ENV
  
      - name: Ejecuta Docker
        run: |
          docker run -d --name laboratorio-final -p 3000:3000 %IMAGE_ID%
